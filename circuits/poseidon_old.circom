pragma circom 2.1.5;


// The templates and functions in this file are general and work for any prime field

include "./poseidon_constants_old.circom";


/*

*** Sigma(): template that receives an input in an returns the value in ** 5:
        - Inputs: in -> field value
        - Outputs: out -> field value
   
   Example: Sigma()(2) = 32  
 */

template Sigma() {
    input signal in;
    output signal out;

    signal in2;
    signal in4;

    in2 <== in*in;
    in4 <== in2*in2;

    out <== in4*in;
}

/*

*** Ark(t, C, r): template that receives an input array of signals in of length t, and returns the array out of length t such that for each position of the array out[i] = in[i] + C[i+r] with C and r parameters of the template (r is the shifting to be used and C the values to be added) 
        - Inputs: in[t] -> field value
        - Outputs: out[t] -> field value
        
    Ark(2, [1, 2, 3, 4], 2)([5, 5]) = [8, 9]
    
    Obs: C is expected to be an array of length at least t + r
    
*/

template Ark(t, C, r) {
    input signal in[t];
    output signal out[t];

    for (var i=0; i<t; i++) {
        out[i] <== in[i] + C[i + r];
    }
}

/*

*** Mix(t, M): template that receives an input array of signals in of length t, and returns the array out of length t such that out[i] = Sum_{j = 0, ..., t-1} (M[j][i] * in[j])
        - Inputs: in[t] -> field value
        - Outputs: out[t] -> field value
        
    Mix(2, [[1, 2], [3, 4]])([1, 0]) = [1, 3]
    
    Obs: M is expected to be a matrix of dimensions at least t * t
    
*/

template Mix(t, M) {
    input signal in[t];
    output signal out[t];

    var lc;
    for (var i=0; i<t; i++) {
        lc = 0;
        for (var j=0; j<t; j++) {
            lc += M[i][j]*in[j];
        }
        out[i] <== lc;
    }
}

/*

*** Poseidon(nInputs): template that implements the Poseidon hash protocol for nInputs. The circuit receives the inputs to be hashed and returns the hashed values. It takes the value 0 as initial state. 
        - Inputs: inputs[nInputs] -> field value
        - Outputs: out -> field value
*/


template Poseidon(nInputs) {
    input signal inputs[nInputs];
    output signal out;

    // Using recommended parameters from whitepaper https://eprint.iacr.org/2019/458.pdf (table 2, table 8)
    // Generated by https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/calc_round_numbers.py
    // And rounded up to nearest integer that divides by t
    var N_ROUNDS_P[16] = [56, 57, 56, 60, 60, 63, 64, 63, 60, 66, 60, 65, 70, 60, 64, 68];
    var t = nInputs + 1;
    var nRoundsF = 8;
    var nRoundsP = N_ROUNDS_P[t - 2];
    var C[t*(nRoundsF + nRoundsP)] = POSEIDON_C(t);
    var M[t][t] = POSEIDON_M(t);

    component ark[nRoundsF + nRoundsP];
    component sigmaF[nRoundsF][t];
    component sigmaP[nRoundsP];
    component mix[nRoundsF + nRoundsP];

    var k;

    for (var i=0; i<nRoundsF + nRoundsP; i++) {
        ark[i] = Ark(t, C, t*i);
        for (var j=0; j<t; j++) {
            if (i==0) {
                if (j>0) {
                    ark[i].in[j] <== inputs[j-1];
                } else {
                    ark[i].in[j] <== 0;
                }
            } else {
                ark[i].in[j] <== mix[i-1].out[j];
            }
        }

        if (i < nRoundsF/2 || i >= nRoundsP + nRoundsF/2) {
            k = i < nRoundsF/2 ? i : i - nRoundsP;
            mix[i] = Mix(t, M);
            for (var j=0; j<t; j++) {
                sigmaF[k][j] = Sigma();
                sigmaF[k][j].in <== ark[i].out[j];
                mix[i].in[j] <== sigmaF[k][j].out;
            }
        } else {
            k = i - nRoundsF/2;
            mix[i] = Mix(t, M);
            sigmaP[k] = Sigma();
            sigmaP[k].in <== ark[i].out[0];
            mix[i].in[0] <== sigmaP[k].out;
            for (var j=1; j<t; j++) {
                mix[i].in[j] <== ark[i].out[j];
            }
        }
    }

    out <== mix[nRoundsF + nRoundsP -1].out[0];
}
